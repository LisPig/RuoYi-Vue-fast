<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.project.business.mapper.UsersMapper">
    
    <resultMap type="Users" id="UsersResult">
        <result property="id"    column="id"    />
        <result property="username"    column="username"    />
        <result property="passwordHash"    column="password_hash"    />
        <result property="email"    column="email"    />
        <result property="createdAt"    column="created_at"    />
    </resultMap>

    <sql id="selectUsersVo">
        select id, username, password_hash, email, created_at from Users
    </sql>

    <select id="selectUsersList" parameterType="Users" resultMap="UsersResult">
        <include refid="selectUsersVo"/>
        <where>  
            <if test="username != null  and username != ''"> and username like concat('%', #{username}, '%')</if>
            <if test="passwordHash != null  and passwordHash != ''"> and password_hash = #{passwordHash}</if>
            <if test="email != null  and email != ''"> and email = #{email}</if>
            <if test="createdAt != null "> and created_at = #{createdAt}</if>
        </where>
    </select>
    
    <select id="selectUsersById" parameterType="Long" resultMap="UsersResult">
        <include refid="selectUsersVo"/>
        where id = #{id}
    </select>

    <select id="selectUserByUserName" parameterType="String" resultMap="UsersResult">
        <include refid="selectUsersVo"/>
        where u.username = #{username}
    </select>

    <select id="checkUserNameUnique" parameterType="String" resultMap="UsersResult">
        select id, username from Users where username = #{username} limit 1
    </select>

    <select id="checkEmailUnique" parameterType="String" resultMap="UsersResult">
        select id, email from Users where email = #{email}  limit 1
    </select>

    <insert id="insertUsers" parameterType="Users" useGeneratedKeys="true" keyProperty="id">
        insert into Users
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="username != null and username != ''">username,</if>
            <if test="passwordHash != null and passwordHash != ''">password_hash,</if>
            <if test="email != null and email != ''">email,</if>
            <if test="createdAt != null">created_at,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="username != null and username != ''">#{username},</if>
            <if test="passwordHash != null and passwordHash != ''">#{passwordHash},</if>
            <if test="email != null and email != ''">#{email},</if>
            <if test="createdAt != null">#{createdAt},</if>
         </trim>
    </insert>

    <update id="updateUsers" parameterType="Users">
        update Users
        <trim prefix="SET" suffixOverrides=",">
            <if test="username != null and username != ''">username = #{username},</if>
            <if test="passwordHash != null and passwordHash != ''">password_hash = #{passwordHash},</if>
            <if test="email != null and email != ''">email = #{email},</if>
            <if test="createdAt != null">created_at = #{createdAt},</if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteUsersById" parameterType="Long">
        delete from Users where id = #{id}
    </delete>

    <delete id="deleteUsersByIds" parameterType="String">
        delete from Users where id in 
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
</mapper>